import tensorflow as tf
import matplotlib.pyplot as plt


def calculate_confusion_matrix(model, test_dataset):
    predictions = model.predict(test_dataset)
    y_pred = tf.argmax(predictions, 1)
    y_true = []
    for _, y in test_dataset:
        y_true.append(y)
    y_true = tf.concat(y_true, 0)
    indices = tf.stack([tf.cast(y_true, tf.int32),
                        tf.cast(y_pred, tf.int32)], 1)
    return tf.cast(
        tf.scatter_nd(indices, tf.ones((len(indices))),
                      (tf.reduce_max(y_true) + 1, tf.reduce_max(y_true) + 1)),
        tf.int32)


def render_confusion_matrix(confusion_matrix, classes):
    sums = tf.reduce_sum(confusion_matrix, 1)
    norm_confusion_matrix = confusion_matrix / tf.reshape(sums, (-1, 1))
    plt.pcolormesh(norm_confusion_matrix)
    plt.xlabel("Klasa rozpoznana", fontsize=13)
    plt.ylabel("Klasa rzeczywista", fontsize=13)
    plt.xticks(tf.range(0.5,
                        len(confusion_matrix) + 0.5, 1),
               classes,
               fontsize=13)
    plt.yticks(tf.range(0.5,
                        len(confusion_matrix) + 0.5, 1),
               classes,
               fontsize=13)
    for row, i in zip(confusion_matrix, range(len(confusion_matrix))):
        for col, j in zip(row, range(len(row))):
            plt.text(j + 0.1,
                     i + 0.3,
                     tf.strings.as_string(col).numpy().decode('ascii'),
                     fontsize=12)
    plt.colorbar()
    plt.show()


if __name__ == '__main__':
    confusion_matrix = [[
        0, 371, 153, 370, 116, 228, 113, 261, 852, 319, 198, 107, 197, 421,
        204, 201, 138, 173, 72, 135, 114, 226, 139, 123, 374
    ],
                        [
                            0, 2618, 36, 151, 129, 170, 81, 225, 673, 76, 30,
                            83, 289, 1157, 31, 53, 29, 1664, 42, 57, 162, 61,
                            276, 44, 309
                        ],
                        [
                            0, 56, 716, 17, 50, 101, 41, 126, 51, 121, 16, 70,
                            26, 75, 49, 1, 22, 32, 309, 20, 63, 70, 1, 319, 12
                        ],
                        [
                            0, 123, 333, 3525, 20, 252, 95, 121, 153, 178, 898,
                            85, 96, 120, 256, 839, 22, 78, 25, 1634, 58, 97,
                            209, 43, 501
                        ],
                        [
                            0, 2, 10, 63, 278, 0, 1, 7, 10, 18, 5, 132, 6, 33,
                            1, 31, 37, 7, 5, 4, 68, 6, 6, 5, 6
                        ],
                        [
                            0, 106, 106, 253, 415, 4030, 12, 79, 254, 195, 224,
                            482, 1434, 93, 528, 177, 320, 800, 40, 48, 70,
                            1981, 65, 61, 412
                        ],
                        [
                            0, 753, 35, 111, 34, 257, 1159, 9, 74, 60, 113, 65,
                            79, 109, 25, 383, 44, 406, 141, 35, 10, 19, 734,
                            21, 35
                        ],
                        [
                            0, 46, 333, 22, 21, 24, 62, 388, 11, 25, 21, 55,
                            77, 12, 88, 9, 82, 34, 64, 74, 14, 23, 9, 389, 13
                        ],
                        [
                            0, 237, 153, 1821, 56, 185, 53, 238, 2976, 30, 113,
                            166, 147, 95, 82, 408, 39, 1095, 62, 221, 476, 46,
                            73, 31, 2079
                        ],
                        [
                            0, 20, 29, 8, 167, 12, 0, 14, 5, 306, 1, 4, 23,
                            130, 12, 3, 86, 7, 19, 2, 8, 51, 2, 2, 1
                        ],
                        [
                            0, 167, 225, 719, 227, 2588, 68, 133, 180, 444,
                            3101, 69, 250, 96, 1987, 175, 160, 349, 75, 1461,
                            51, 618, 513, 47, 110
                        ],
                        [
                            0, 27, 44, 72, 16, 29, 173, 20, 5, 21, 58, 875, 9,
                            21, 14, 332, 17, 14, 53, 5, 64, 4, 31, 50, 7
                        ],
                        [
                            0, 17, 71, 117, 66, 213, 71, 405, 24, 63, 89, 328,
                            1164, 34, 33, 44, 771, 147, 41, 177, 37, 340, 23,
                            89, 234
                        ],
                        [
                            0, 6, 0, 2, 13, 0, 3, 3, 15, 2, 0, 3, 24, 180, 0,
                            2, 10, 12, 5, 1, 3, 5, 3, 1, 8
                        ],
                        [
                            0, 22, 172, 18, 26, 152, 4, 25, 12, 365, 3, 0, 31,
                            88, 516, 1, 26, 13, 14, 8, 4, 117, 1, 6, 6
                        ],
                        [
                            0, 63, 46, 281, 6, 78, 196, 3, 107, 65, 182, 21, 7,
                            66, 40, 870, 5, 59, 30, 36, 17, 7, 106, 4, 90
                        ],
                        [
                            0, 1, 12, 4, 62, 0, 0, 29, 0, 9, 2, 81, 0, 4, 0, 7,
                            106, 0, 1, 2, 0, 3, 0, 10, 0
                        ],
                        [
                            0, 55, 3, 88, 30, 174, 3, 18, 284, 8, 64, 49, 201,
                            14, 61, 21, 53, 979, 5, 7, 16, 28, 8, 2, 191
                        ],
                        [
                            0, 142, 21, 12, 34, 60, 68, 5, 53, 79, 1, 52, 37,
                            132, 11, 66, 18, 107, 263, 3, 22, 49, 11, 8, 9
                        ],
                        [
                            0, 94, 445, 26, 8, 93, 78, 170, 6, 44, 156, 19, 89,
                            11, 242, 11, 38, 63, 76, 722, 0, 26, 10, 49, 15
                        ],
                        [
                            0, 49, 28, 335, 14, 10, 24, 29, 29, 2, 20, 65, 1,
                            20, 7, 124, 5, 42, 8, 66, 184, 1, 11, 14, 15
                        ],
                        [
                            0, 5, 15, 35, 71, 5, 1, 6, 8, 70, 1, 53, 85, 11, 5,
                            8, 90, 6, 3, 5, 24, 138, 2, 5, 7
                        ],
                        [
                            0, 207, 2, 150, 44, 463, 9, 8, 77, 48, 230, 20, 40,
                            30, 34, 51, 24, 285, 4, 71, 9, 92, 988, 1, 37
                        ],
                        [
                            0, 3, 40, 2, 1, 17, 42, 8, 0, 2, 1, 25, 5, 1, 4,
                            10, 1, 4, 42, 1, 1, 1, 2, 55, 0
                        ],
                        [
                            0, 5, 51, 236, 2, 125, 84, 233, 12, 7, 14, 50, 118,
                            2, 11, 39, 32, 14, 13, 150, 0, 44, 11, 92, 475
                        ]]
    render_confusion_matrix(tf.constant(confusion_matrix), [
        'N', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H',
        'c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'b', 'h'
    ])
